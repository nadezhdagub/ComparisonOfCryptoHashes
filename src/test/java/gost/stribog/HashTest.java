// This is a personal academic project. Dear PVS-Studio, please check it.

// PVS-Studio Static Code Analyzer for C, C++, C#, and Java: http://www.viva64.com

package gost.stribog;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import stribog.Hash;

import java.math.BigInteger;


/**
 * Данная программа тестирования включает в себя Контрольные примеры из Приложения А ГОСТ 34.11-2018
 * http://protect.gost.ru/v.aspx?control=8&baseC=-1&page=0&month=-1&year=-1&search=&RegNum=1&DocOnPageCount=15&id=224241&pageK=679B6E33-C0F0-41BE-B59E-71E68AF94A21
 */
class HashTest {
    private final int[] message1 = {
            0x32, 0x31, 0x30, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x39, 0x38, 0x37,
            0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31,
            0x30, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x39, 0x38, 0x37, 0x36, 0x35,
            0x34, 0x33, 0x32, 0x31, 0x30, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30
    };

    private final int[] message2 = {
            0xFB, 0xE2, 0xE5, 0xF0, 0xEE, 0xE3, 0xC8, 0x20, 0xFB, 0xEA, 0xFA, 0xEB, 0xEF, 0x20, 0xFF, 0xFB,
            0xF0, 0xE1, 0xE0, 0xF0, 0xF5, 0x20, 0xE0, 0xED, 0x20, 0xE8, 0xEC, 0xE0, 0xEB, 0xE5, 0xF0, 0xF2,
            0xF1, 0x20, 0xFF, 0xF0, 0xEE, 0xEC, 0x20, 0xF1, 0x20, 0xFA, 0xF2, 0xFE, 0xE5, 0xE2, 0x20, 0x2C,
            0xE8, 0xF6, 0xF3, 0xED, 0xE2, 0x20, 0xE8, 0xE6, 0xEE, 0xE1, 0xE8, 0xF0, 0xF2, 0xD1, 0x20, 0x2C,
            0xE8, 0xF0, 0xF2, 0xE5, 0xE2, 0x20, 0xE5, 0xD1
    };

    private final int[] hash1_512 = {
            0x48, 0x6F, 0x64, 0xC1, 0x91, 0x78, 0x79, 0x41, 0x7F, 0xEF, 0x08, 0x2B, 0x33, 0x81, 0xA4, 0xE2, 0x11, 0xC3,
            0x24, 0xF0, 0x74, 0x65, 0x4C, 0x38, 0x82, 0x3A, 0x7B, 0x76, 0xF8, 0x30, 0xAD, 0x00, 0xFA, 0x1F, 0xBA, 0xE4,
            0x2B, 0x12, 0x85, 0xC0, 0x35, 0x2F, 0x22, 0x75, 0x24, 0xBC, 0x9A, 0xB1, 0x62, 0x54, 0x28, 0x8D, 0xD6, 0x86,
            0x3D, 0xCC, 0xD5, 0xB9, 0xF5, 0x4A, 0x1A, 0xD0, 0x54, 0x1B
    };

    private final BigInteger hash1_512BI = new BigInteger(int2byte(hash1_512));

    private final int[] hash1_256 = {
            0x00, 0x55, 0x7B, 0xE5, 0xE5, 0x84, 0xFD, 0x52, 0xA4, 0x49, 0xB1, 0x6B, 0x02, 0x51, 0xD0, 0x5D, 0x27, 0xF9, 
            0x4A, 0xB7, 0x6C, 0xBA, 0xA6, 0xDA, 0x89, 0x0B, 0x59, 0xD8, 0xEF, 0x1E, 0x15, 0x9D
    };

    private final BigInteger hash1_256BI = new BigInteger(int2byte(hash1_256));

    private final int[] hash2_512 = {
            0x28, 0xfb, 0xc9, 0xba, 0xda, 0x03, 0x3b, 0x14, 0x60, 0x64, 0x2b, 0xdc, 0xdd, 0xb9, 0x0c, 0x3f, 0xb3, 0xe5,
            0x6c, 0x49, 0x7c, 0xcd, 0x0f, 0x62, 0xb8, 0xa2, 0xad, 0x49, 0x35, 0xe8, 0x5f, 0x03, 0x76, 0x13, 0x96, 0x6d,
            0xe4, 0xee, 0x00, 0x53, 0x1a, 0xe6, 0x0f, 0x3b, 0x5a, 0x47, 0xf8, 0xda, 0xe0, 0x69, 0x15, 0xd5, 0xf2, 0xf1,
            0x94, 0x99, 0x6f, 0xca, 0xbf, 0x26, 0x22, 0xe6, 0x88, 0x1e
    };

    private final BigInteger hash2_512BI = new BigInteger(int2byte(hash2_512));

    private final int[] hash2_256 = {
            0x50, 0x8f, 0x7e, 0x55, 0x3c, 0x06, 0x50, 0x1d, 0x74, 0x9a, 0x66, 0xfc, 0x28, 0xc6, 0xca, 0xc0, 0xb0, 0x05,
            0x74, 0x6d, 0x97, 0x53, 0x7f, 0xa8, 0x5d, 0x9e, 0x40, 0x90, 0x4e, 0xfe, 0xd2, 0x9d
    };

    private final BigInteger hash2_256BI = new BigInteger(int2byte(hash2_256));

    @Test
    void getHash() {

        //Пример 1
        var stribog512_1 = new Hash(512);
        var ar512 = stribog512_1.getHash(message1);
        Assertions.assertEquals(hash1_512BI, ar512);

        var stribog512_2 = new Hash(512);
        ar512 = stribog512_2.getHash(message2);
        Assertions.assertEquals(hash2_512BI, ar512);

        //Пример 2
        var stribog256_1 = new Hash(256);
        var ar256 = stribog256_1.getHash(message1);
        Assertions.assertEquals(hash1_256BI, ar256);

        var stribog256_2 = new Hash(256);
        ar256 = stribog256_2.getHash(message2);
        Assertions.assertEquals(hash2_256BI, ar256);

    }

    private byte[] int2byte(int[] src) {
        var srcLength = src.length;
        var dst = new byte[srcLength];
        for (var i = 0; i < srcLength; i++)
            dst[i] = (byte) (src[i] - 128);
        return dst;
    }
}